buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT repository (if needed)
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath('nu.studer:gradle-jooq-plugin:3.0.2')

        //gae
        classpath('com.google.cloud.tools:appengine-gradle-plugin:1.+')
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += 'src/main/jooq-generate'
}

dependencies {
    // spring
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }

    // kotlin
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    // swagger
    compile('io.springfox:springfox-swagger2:2.9.2')
    compile('io.springfox:springfox-swagger-ui:2.9.2')

    // devtools
    compile("org.springframework.boot:spring-boot-devtools")
    
    // jooq
    runtime('com.h2database:h2')
    jooqRuntime('com.h2database:h2')

    // test
    testCompile('org.springframework.boot:spring-boot-starter-test')

    //gae
    compile 'com.google.appengine:appengine-api-1.0-sdk:+'
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    providedRuntime 'org.springframework.boot:spring-boot-starter-jetty'

    compile 'com.google.cloud:google-cloud:+'

    compile 'jstl:jstl:1.2'

    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.33'
    testCompile 'org.mockito:mockito-all:1.10.19'

    testCompile 'com.google.appengine:appengine-testing:+'
    testCompile 'com.google.appengine:appengine-api-stubs:+'
    testCompile 'com.google.appengine:appengine-tools-sdk:+'
}

jooq {
    version = '3.11.2'
    edition = 'OSS'
    orm(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:~/orm;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=TRUE;MODE=MYSQL;DATABASE_TO_UPPER=false'
            user = 'sa'
            password = ''
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.h2.H2Database'
                inputSchema = 'public'
                outputSchema = 'PUBLIC'
                includes = '.*'
                excludes = ''
            }
            target {
                packageName = 'orm.jooq'
                directory = 'src/main/jooq-generate/'
            }
        }
    }
}

appengineDeploy.dependsOn test
appengineStage.dependsOn test

appengine {  // App Engine tasks configuration
    deploy {   // deploy configuration

    }
}

test {
    useJUnit()
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("test: " + descriptor + "  Running")
    }

    onOutput { descriptor, event ->
        logger.lifecycle("test: " + descriptor + ": " + event.message)
    }
    afterTest { descriptor, result ->
        logger.lifecycle("test: " + descriptor + ": " + result)
    }
}

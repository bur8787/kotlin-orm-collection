/*
 * This file is generated by jOOQ.
 */
package orm.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import orm.jooq.Indexes;
import orm.jooq.Keys;
import orm.jooq.Public;
import orm.jooq.tables.records.TasksRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tasks extends TableImpl<TasksRecord> {

    private static final long serialVersionUID = -230772646;

    /**
     * The reference instance of <code>PUBLIC.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksRecord> getRecordType() {
        return TasksRecord.class;
    }

    /**
     * The column <code>PUBLIC.tasks.id</code>.
     */
    public final TableField<TasksRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.tasks.project_id</code>.
     */
    public final TableField<TasksRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.tasks.assigned_to</code>.
     */
    public final TableField<TasksRecord, Integer> ASSIGNED_TO = createField("assigned_to", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.tasks.status</code>.
     */
    public final TableField<TasksRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.tasks.name</code>.
     */
    public final TableField<TasksRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.tasks</code> table reference
     */
    public Tasks() {
        this(DSL.name("tasks"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(DSL.name(alias), TASKS);
    }

    /**
     * Create an aliased <code>PUBLIC.tasks</code> table reference
     */
    public Tasks(Name alias) {
        this(alias, TASKS);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tasks(Table<O> child, ForeignKey<O, TasksRecord> key) {
        super(child, key, TASKS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_6, Indexes.PRIMARY_KEY_69);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TasksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TASKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TasksRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_69;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TasksRecord>> getKeys() {
        return Arrays.<UniqueKey<TasksRecord>>asList(Keys.CONSTRAINT_69);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TasksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TasksRecord, ?>>asList(Keys.CONSTRAINT_690);
    }

    public Projects projects() {
        return new Projects(this, Keys.CONSTRAINT_690);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tasks as(String alias) {
        return new Tasks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tasks as(Name alias) {
        return new Tasks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Name name) {
        return new Tasks(name, null);
    }
}
